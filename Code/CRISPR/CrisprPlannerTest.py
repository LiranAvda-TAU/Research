import time

from Code.CRISPR.CrisprPlanner import CrisprPlanner
from Code.CRISPR.Enum.AminoAcid import AminoAcid
from Code.CRISPR.Enum.DNASection import DNASection
from Code.CRISPR.Enum.RestrictionSiteType import RestrictionSiteType
from Code.CRISPR.NamedTuples.CodonData import CodonData
from Code.CRISPR.NamedTuples.PointMutation import PointMutation
from Code.CRISPR.NamedTuples.ReattachmentSection import ReattachmentSection
from Code.CRISPR.NamedTuples.RestrictionEnzyme import RestrictionEnzyme
from Code.CRISPR.NamedTuples.RestrictionSite import RestrictionSite
from Code.CRISPR.NamedTuples.SequenceSites import SequenceSites
from Code.Files.FileReader import FileReader


def initiate_cp(complete_fiels=True):
    human_gene_name = 'cct-1'
    aa_mutation_site = 287
    nuc_seq = "gtaATGGCATCAGCTGGAGATTCCATTCTTGCCCTCACCGGTAAAAGAACTACTGGACAAGGCATCAGATCTCAGAATGgtaacaccgaaagctcaatataagtatacattaattaattgcagTCACCGCGGCAGTTGCGATCGCCAATATTGTGAAGTCATCTCTTGGCCCTGTCGGACTTGATAAAATGCTTGTCGATGATGTTGGAGATGTCATTGTCACAAATGACGGAGCCACAATTCTGAAACAACTCGAGGTTGAGCATCCGGCTGGAAAAGTGCTTGTAGAACTTGCACAGCTGCAAGACGAGGAGGTCGGAGATGGAACTACTTCTGTCGTTATTGTGGCGGCTGAGCTCTTGAAGAGAGCCGATGAGCTTGTGAAACAAAAAGTTCATCCGACGACTATTATCAATGGTTACCGTCTCGCGTGCAAGGAAGCCGTCAAGTACATTAGTGAAAACATCTCATTCACTTCCGACTCGATTGGTAGACAATCAGTTGTCAACGCTGCCAAAACTTCCATGAGCAGTAAGATTATCGGACCgtgagtttggtgttgtctatgcttcaagaaaattgatttttcagAGACGCCGATTTCTTCGGAGAGCTGGTTGTTGATGCCGCGGAAGCTGTTCGTGTGGAAAATAACGGGAAAGTCACTTATCCTATCAATGCAGTCAATGTTCTGAAGGCCCACGGAAAGAGCGCTCGCGAATCAGTTTTGGTGAAAGGATATGCACTCAATTGCACAGTTGCCAGTCAGGCCATGCCACTTCGTGTTCAAAATGCCAAGATCGCATGTCTCGATTTCTCTTTGATGAAGGCTAAGATGCACCTCGGTATTTCAGTCGTTGTTGAAGATCCAGCCAAGCTTGAGGCTATTCGCAGAGAgtgagttgaaactattcgtttctttttaagctatggaattttcagAGAATTCGATATTACCAAACGCCGCATTGATAAAATTTTGAAAGCCGGAGCCAACGTTGTTCTTACAACTGGAGGTATCGATGATTTGTGCTTGAAGCAATTTGTCGAATCTGGAGCTATGGCTGTTCGTCGATGCAAGAAATCAGACTTGAAGAGAATTGCCAAAGCTACTGGAGCCACATTGACTGTTTCCTTGGCTACTTTGGAAGGAGATGAAGCTTTCGATGCCTCGCTTCTTGGACATGCCGATGAAATTGTTCAAGAAAGAATTAGTGACGACGAGCTCATTCTCATCAAGGGACCGAAATCTCGTACTGCCAGCAGCATTATCCTCCGTGGAGCGAACGATGTGATGCTCGATGAAATGGAGAGATCGGTTCACGACTCACTCTGTGTTGTTCGTAGAGTTCTGGAAAGCAAGAAACTTGTGGCTGGAGGAGGTGCTGTTGAGACTTCTCTCAGTCTTTTCCTTGAAACTTATGCACAAACCTTGTCTTCTCGCGAGCAGCTTGCTGTTGCTGAATTCGCTTCAGCGCTTCTCATCATTCCGAAGGTTTTGGCAAGCAATGCTGCAAGAGATTCTACTGATTTAGTGACAAAACTCCGCGCGTACCACTCCAAAGCTCAATTGATCCCACAACTTCAACACCTCAAGTGgtaagtgaaaatgttttttttaaagagtaggttattacatgttagcttaatgtaataaaattaaaataatttatttcaaaaaatttcgttttgtgcttagaaaaagcgtctaattcatgttttctgaatttgagtcagtttattcactctttttttagGGCTGGTTTGGATCTCGAAGAAGGCACGATCCGCGATAACAAGGAGGCTGGAATTTTGGAGCCAGCTCTTAGTAAGGTCAAGTCTCTGAAGTTCGCCACTGAGGCAGCCATTACGATATTGCGTATTGATGACCTCATCAAACTTGACAAGCAAGAGCCACTTGGAGGAGATGATTGCCACGCTTAAattttcccgtttaccccgtttatatatccctgttttccgcgtgcttctcacataattccgatctgctgctccttatcccaaattctcatgttcagcttttgttttcttcttttgatgatactttattgaacgaaatgttgtaagttttaatgttttgatttcaaagttgtttgtattcgtttttcattattcaaacaatgaagaagctttgccac"
    cp = CrisprPlanner(gene_name=human_gene_name, aa_mutation_site=aa_mutation_site, sense_strand=nuc_seq)
    cp.initiate_crispr(check_consistency=True)
    chosen_crrna, crrna_strand = cp.get_crrna(window_size=30, PAM_size=3, start_crrna_index=1150)
    if complete_fiels:
        cp.complete_fields(crrna_strand, to_aa=AminoAcid.GLUTAMINE, chosen_crrna=chosen_crrna)
    return cp

test1 = False
if test1:
    repo_1_sense_strand = "ATGGACTTTCAGAACAGAGCTGGAGGAAAAACGGGAAGCGGAGGAGTGGCTTCGGCCGCCGATGCTGGTGTTGATCGACGGGAACGGCTCCGCCAGTTGGCTCTAGAGACAATTGATCTTCAAAAGGATCCGTATTTCATGCGAAATCACATTGGAACGTACGAATGCAAGCTGTGTCTTACTCTTCACAACAATGAAGGATCTTATTTGGCACATACACAAGGAAAGAAGCATCAAGCGAATCTTGCACGGCGTGCCGCTAAAGAACAATCTGAACAACCATTTCTACCAGCTCCACAGAAAGCTGCAGTTGAAACTAAAAAGTTTGTGAAAATCGGACGTCCTGGATACAAGGTAACAAAAGAACGTGATCCAGGAGCTGGCCAGCAAGCACTTCTCTTCCAAATTGATTATCCGGAGATTGCTGACGGTATTGCGCCACGTCATCGATTTATGTCTGCTTATGAGCAAAAGATTCAGCCTCCAGACAAGAGATGGCAATACCTCTTGTTTGCTGCTGAGCCGTATGAAACGATTGGATTCAAAATTCCATCAAGgtgaggctttacaacattttagcacttttctatctcatagttacgattaaaaaaattgtatataccaagtaattttttccagAGAAGTTGACAAATCTGAAAAATTTTGGACGATGTGGAACAAAGACACGAAGCAATTCTTCTTACAAGTCGCATTCAAATTGGAACGACTCGATGATCAGCCGTACTATTGAtactctatgtttttatctttttgatttcaaaattcaaaacaattttttcgtgtttttcgatgatctaacaataaattattttcctttttttt"
    # sense_strand = "gcattgtaaggagaagccgggtaattaatacgataggcgccgttacaaaccgccaactggtgatcattattctctgaaaATGGAGCCGCGGACAGACGGAGCAGAATGCGGTGTCCAGgtattaattttccccgcctagattttccaatttcatattgttttcagGTATTTTGTCGTATTCGGCCGCTCAATAAGACCGAGGAGAAGAATGCGGACCGTTTCCTGCCCAAATTCCCTTCCGAGGACAGTATATCGCTTGGGgtgagtaatacaaaggggtcatagggaacaattatgtcaacagggacgggaagcacgggggatgcaggtgtgtcaattctctcacatgacacattcatctgtttgaaaagtacacgaaaagtgcaaagttgaatatatatatatatatcgattgatttgttggaatttttcagGGAAAAGTATACGTGTTCGATAAAGTGTTCAAGCCGAACACCACGCAAGAGCAAGTGTACAAAGGAGCCGCTTATCACATCGTACAGGATGTATTATCCGGTTATAATGGAACAGTTTTTGCATATGGACAAACATCTTCCGGAAAAACACATACAATGGAGgtaggaattatgaaaaccttgataattacgtagaatgcgacaaagacaatcaagttgtaatatcaacagtgcaaatctttactgattaatgaaaagaaaagtttgagaactaattttcagcagttatttccgaaatcgaatgcccgaaagatttttgataatttttacgtttaaaatattcggcgctcgatgaaattaacaatataatttaattattttcatattttttacagGGAGTAATCGGTGATAATGGCTTGTCGGGAATCATTCCACGTATCGTTGCTGACATCTTTAACCACATTTATAGTATGGACGAGAATCTTCAATTTCACATCAAAGTGTCCTATTATGAAATTTACAACGAGAAGATTCGAGATTTATTAGACCCCGAGAAGGTCAATTTGTCCATTCATGAAGATAAAAATCGAGTGCCATACGTGAAGGGAGCCACCGAACGGTTTGTTGGAGGACCCGATGAGGTTCTTCAGGCAATCGAAGATGGAAAATCCAACAGAATGGTTGCAGTTACGAgtgagtaaacttaaaattaaacaaattaacatgtgaacgaaatttcagACATGAACGAACATTCTTCTCGATCTCATTCCGTCTTCTTGATTACTGTGAAACAAGAACATCAGACAACAAAGAAACAGCTCACCGGAAAGCTTTATCTTGTTGATTTGGCTGGTTCTGAGAAAGTGAGCAAAACTGGAGCTCAAGGAACAGTTTTAGAAGAAGCCAAAAACATCAACAAGTCACTTACTGCACTCGGAATAGTTATTTCAGCATTGGCTGAAGGAACTgtgagttgtttaaattatgaccttcttaaaacgaatatttatttcagAAATCTCATGTTCCATATCGTGATTCCAAACTGACTCGTATTCTTCAAGAATCTCTAGGAGGAAATTCCCGTACTACAGTTATTATTTGTGCTTCTCCGTCACATTTCAACGAAGCTGAAACTAAATCCACACTTTTGTTCGGAGCACGTGCGAAGACTATCAAGAATGTTGTACAAATCAACGAAGAGCTCACAGCAGAAGAATGGAAACGGCGATATGAGAAAGAAAAAGAGAAGAATACTCGATTGGCCGCCCTTCTCCAGGCAGCGGCTTTGGAACTTTCACGCTGGCGTGCTGGAGAATCAGTGTCTGAGGTTGAATGGGTCAATCTATCAGATTCTGCTCAAATGGCTGTGTCGGAAGTTTCTGGTGGGTCGACTCCACTCATGGAACGTTCGATTGCTCCAGCTCCTCCAATGCTAACTTCTACAACTGGCCCGATCACTGACGAAGAGAAGAAGAAGTACGAAGAGGAACGTGTCAAACTGTATCAGCAACTCGACGAGAAAGATGATGAGATTCAAAAAGTTTCGCAAGAGCTTGAGAAGCTTAGACAACAAGTTCTTCTCCAAGAAGAAGCTTTGGGAACTATGCGTGAAAACGAGGAGCTGATCCGTGAAGAGAACAACCGATTCCAAAAAGAAGCTGAAGACAAGCAGCAAGAAGGAAAGGAAATGATGACAGCTCTGGAAGAGATTGCTGTCAACTTGGATGTTCGACAAGCAGAATGCGAAAAATTGAAGAGAGAGTTGGAAGTTGTTCAAGAAGATAACCAGAGTTTGGAAGATCGAATGAACCAAGCAACATCACTCCTCAATGCTCATCTTGACGAATGTGGTCCAAAAATCCGTCATTTCAAAGAAGGAATCTACAATGTTATTCGTGAATTCAACATTGCTGACATTGCCTCTCAAAATGATCAACTTCCTGATCACGATCTTCTGAACCATGTCAGAATCGGAGTTTCAAAACTCTTCTCAGAATACTCTGCTGCGAAAGAGAGCAGTACAGCTGCCGAGCATGATGCTGAAGCGAAACTTGCAGCTGATGTTGCTCGTGTTGAATCTGGTCAAGACGCGGGTAGAATGAAACAATTGCTGGTGAAGGATCAGGCGGCAAAGGAGATCAAGCCACTAACAGATCGTGTCAATATGGAGCTTACAACGTTGAAGAATTTGAAAAAGGAGTTCATGAGAGTACTTGTTGCTCGATGCCAAGCCAATCAAGACACCGAGGGAGAAGATTCTCTCAGTGGACCAGCTCAAAAGCAACGAATTCAGTTCTTGGAGAACAATTTGGACAAGTTGACGAAGGTTCACAAGCAGgtttgtcgtttttattctcattttgattatcttaaaacttgaattttcagCTTGTTCGCGACAATGCCGATTTGCGCGTTGAACTGCCAAAGATGGAAGCTCGTCTTCGTGGTCGTGAAGATCGCATCAAAATATTAGAAACTGCTCTTCGTGATTCGAAGCAACGTAGTCAAGCAGAACGAAAGAAGTATCAACAAGAAGTTGAACGAATCAAGGAAGCTGTTCGACAACGTAACATGCGACGAATGAATGCTCCACAAATTGTGAAGCCAATCCGTCCAGGACAAGTGTATACGTCTCCGTCAGCAGGAATGTCACAAGGAGCTCCAAATGGCTCAAACGgtgtgtttagtcagacatctacaccttcaacatctcgcaatcagataccatcaaaaatgactatttcacagttgattgcagaaatttaagatttttttaaaaattctttagtgctcatgtaatttttcacaagtaattatactatgaattagaattagagtgagtgtttctttttcttcctaccgtattatcaaatttaacagtcttttgtccgtccatttttcactaatcaaagtttttcagCATAAtgtctcccaacaacaacatcaactcatcgtcttctttgatccaatcaatacactgaagactgacattcaaatgcttctctatctctcttcttttcccggctttgtgatatactttcgatgggcttttctgtttattttaaaatctagtaacttatacaattacgcggcttctggaagtttcaacaaaaatatcttcatttggttggttgtgtctccccatttcgttccttggcttctcgtcttccatgtagaatacaaaacttcaaaagctaaaagtatttaaagcttccctccacccccacccaaattgcctttttccgcctttttgttctaatagtctgtttctatacgattttcctgtttcagttttactaatctgacacgaggttttgtctggttcttccccccgtcacccaccaacactcctatgattgttttttgcatgcgtttgagtgtctttaaagcttgcttgctaaatccccctatcattcttcataagaaatcaacttgtttcgtttctgcacaattcggcccccaaatccccgcacatcccaattg"
    repo_1_aa_sequence = "MDFQNRAGGKTGSGGVASAADAGVDRRERLRQLALETIDLQKDPYFMRNHIGTYECKLCLTLHNNEGSYLAHTQGKKHQANLARRAAKEQSEQPFLPAPQKAAVETKKFVKIGRPGYKVTKERDPGAGQQALLFQIDYPEIADGIAPRHRFMSAYEQKIQPPDKRWQYLLFAAEPYETIGFKIPSREVDKSEKFWTMWNKDTKQFFLQVAFKLERLDDQPYY"
    # amino_acid_sequence = "MEPRTDGAECGVQVFCRIRPLNKTEEKNADRFLPKFPSEDSISLGGKVYVFDKVFKPNTTQEQVYKGAAYHIVQDVLSGYNGTVFAYGQTSSGKTHTMEGVIGDNGLSGIIPRIVADIFNHIYSMDENLQFHIKVSYYEIYNEKIRDLLDPEKVNLSIHEDKNRVPYVKGATERFVGGPDEVLQAIEDGKSNRMVAVTNMNEHSSRSHSVFLITVKQEHQTTKKQLTGKLYLVDLAGSEKVSKTGAQGTVLEEAKNINKSLTALGIVISALAEGTKSHVPYRDSKLTRILQESLGGNSRTTVIICASPSHFNEAETKSTLLFGARAKTIKNVVQINEELTAEEWKRRYEKEKEKNTRLAALLQAAALELSRWRAGESVSEVEWVNLSDSAQMAVSEVSGGSTPLMERSIAPAPPMLTSTTGPITDEEKKKYEEERVKLYQQLDEKDDEIQKVSQELEKLRQQVLLQEEALGTMRENEELIREENNRFQKEAEDKQQEGKEMMTALEEIAVNLDVRQAECEKLKRELEVVQEDNQSLEDRMNQATSLLNAHLDECGPKIRHFKEGIYNVIREFNIADIASQNDQLPDHDLLNHVRIGVSKLFSEYSAAKESSTAAEHDAEAKLAADVARVESGQDAGRMKQLLVKDQAAKEIKPLTDRVNMELTTLKNLKKEFMRVLVARCQANQDTEGEDSLSGPAQKQRIQFLENNLDKLTKVHKQLVRDNADLRVELPKMEARLRGREDRIKILETALRDSKQRSQAERKKYQQEVERIKEAVRQRNMRRMNAPQIVKPIRPGQVYTSPSAGMSQGAPNGSNA"
    cp = CrisprPlanner("repo-1",
                       aa_mutation_site=31,
                       sense_strand=repo_1_sense_strand,
                       amino_acid_sequence=repo_1_aa_sequence)
    cp.plan_my_crispr(from_aa=AminoAcid.ARGININE, to_aa=AminoAcid.GLUTAMINE, check_consistency=False)
    # cp.plan_my_crispr(aa_mutation_site=26)

# work2 = False
# if work2:
#     # seq = "GCCCCAACAAT"
#     # demands = {4: 'C', 5: 'A', 6: 'A'}
#     # pam_sites = (6, 8)
#     mutants_dic = {}
#     CrisprPlanner.modify_seq_to_change_restriction_sites("TCCAACA", {2: "C", 3: "A", 4: "A"},
#                                                          mutants=mutants_dic, max_mutations=2, mutations_so_far=0)
#     print(mutants_dic)
#     print(str(len(mutants_dic)))

test3 = False
if test3:
    human_gene_name = 'cct-1'
    amino_acid_mutation_site = 287
    nt_seq = "gtaATGGCATCAGCTGGAGATTCCATTCTTGCCCTCACCGGTAAAAGAACTACTGGACAAGGCATCAGATCTCAGAATGgtaacaccgaaagctcaatataagtatacattaattaattgcagTCACCGCGGCAGTTGCGATCGCCAATATTGTGAAGTCATCTCTTGGCCCTGTCGGACTTGATAAAATGCTTGTCGATGATGTTGGAGATGTCATTGTCACAAATGACGGAGCCACAATTCTGAAACAACTCGAGGTTGAGCATCCGGCTGGAAAAGTGCTTGTAGAACTTGCACAGCTGCAAGACGAGGAGGTCGGAGATGGAACTACTTCTGTCGTTATTGTGGCGGCTGAGCTCTTGAAGAGAGCCGATGAGCTTGTGAAACAAAAAGTTCATCCGACGACTATTATCAATGGTTACCGTCTCGCGTGCAAGGAAGCCGTCAAGTACATTAGTGAAAACATCTCATTCACTTCCGACTCGATTGGTAGACAATCAGTTGTCAACGCTGCCAAAACTTCCATGAGCAGTAAGATTATCGGACCgtgagtttggtgttgtctatgcttcaagaaaattgatttttcagAGACGCCGATTTCTTCGGAGAGCTGGTTGTTGATGCCGCGGAAGCTGTTCGTGTGGAAAATAACGGGAAAGTCACTTATCCTATCAATGCAGTCAATGTTCTGAAGGCCCACGGAAAGAGCGCTCGCGAATCAGTTTTGGTGAAAGGATATGCACTCAATTGCACAGTTGCCAGTCAGGCCATGCCACTTCGTGTTCAAAATGCCAAGATCGCATGTCTCGATTTCTCTTTGATGAAGGCTAAGATGCACCTCGGTATTTCAGTCGTTGTTGAAGATCCAGCCAAGCTTGAGGCTATTCGCAGAGAgtgagttgaaactattcgtttctttttaagctatggaattttcagAGAATTCGATATTACCAAACGCCGCATTGATAAAATTTTGAAAGCCGGAGCCAACGTTGTTCTTACAACTGGAGGTATCGATGATTTGTGCTTGAAGCAATTTGTCGAATCTGGAGCTATGGCTGTTCGTCGATGCAAGAAATCAGACTTGAAGAGAATTGCCAAAGCTACTGGAGCCACATTGACTGTTTCCTTGGCTACTTTGGAAGGAGATGAAGCTTTCGATGCCTCGCTTCTTGGACATGCCGATGAAATTGTTCAAGAAAGAATTAGTGACGACGAGCTCATTCTCATCAAGGGACCGAAATCTCGTACTGCCAGCAGCATTATCCTCCGTGGAGCGAACGATGTGATGCTCGATGAAATGGAGAGATCGGTTCACGACTCACTCTGTGTTGTTCGTAGAGTTCTGGAAAGCAAGAAACTTGTGGCTGGAGGAGGTGCTGTTGAGACTTCTCTCAGTCTTTTCCTTGAAACTTATGCACAAACCTTGTCTTCTCGCGAGCAGCTTGCTGTTGCTGAATTCGCTTCAGCGCTTCTCATCATTCCGAAGGTTTTGGCAAGCAATGCTGCAAGAGATTCTACTGATTTAGTGACAAAACTCCGCGCGTACCACTCCAAAGCTCAATTGATCCCACAACTTCAACACCTCAAGTGgtaagtgaaaatgttttttttaaagagtaggttattacatgttagcttaatgtaataaaattaaaataatttatttcaaaaaatttcgttttgtgcttagaaaaagcgtctaattcatgttttctgaatttgagtcagtttattcactctttttttagGGCTGGTTTGGATCTCGAAGAAGGCACGATCCGCGATAACAAGGAGGCTGGAATTTTGGAGCCAGCTCTTAGTAAGGTCAAGTCTCTGAAGTTCGCCACTGAGGCAGCCATTACGATATTGCGTATTGATGACCTCATCAAACTTGACAAGCAAGAGCCACTTGGAGGAGATGATTGCCACGCTTAAattttcccgtttaccccgtttatatatccctgttttccgcgtgcttctcacataattccgatctgctgctccttatcccaaattctcatgttcagcttttgttttcttcttttgatgatactttattgaacgaaatgttgtaagttttaatgttttgatttcaaagttgtttgtattcgtttttcattattcaaacaatgaagaagctttgccac"
    mutated_seq = "CCGGACAA"
    CrisprPlanner(human_gene_name, amino_acid_mutation_site, nt_seq).find_restriction_sites("TCCGCCAG")

test4 = False
if test4:
    a = "AAA"
    b = AminoAcid.ASPARAGINE
    codon_details = CrisprPlanner.how_to_get_b_from_a(a, b)
    print(codon_details)

test5 = False
if test5:
    human_gene_name = 'cct-1'
    amino_acid_mutation_site = 287
    nt_seq = "gtaATGGCATCAGCTGGAGATTCCATTCTTGCCCTCACCGGTAAAAGAACTACTGGACAAGGCATCAGATCTCAGAATGgtaacaccgaaagctcaatataagtatacattaattaattgcagTCACCGCGGCAGTTGCGATCGCCAATATTGTGAAGTCATCTCTTGGCCCTGTCGGACTTGATAAAATGCTTGTCGATGATGTTGGAGATGTCATTGTCACAAATGACGGAGCCACAATTCTGAAACAACTCGAGGTTGAGCATCCGGCTGGAAAAGTGCTTGTAGAACTTGCACAGCTGCAAGACGAGGAGGTCGGAGATGGAACTACTTCTGTCGTTATTGTGGCGGCTGAGCTCTTGAAGAGAGCCGATGAGCTTGTGAAACAAAAAGTTCATCCGACGACTATTATCAATGGTTACCGTCTCGCGTGCAAGGAAGCCGTCAAGTACATTAGTGAAAACATCTCATTCACTTCCGACTCGATTGGTAGACAATCAGTTGTCAACGCTGCCAAAACTTCCATGAGCAGTAAGATTATCGGACCgtgagtttggtgttgtctatgcttcaagaaaattgatttttcagAGACGCCGATTTCTTCGGAGAGCTGGTTGTTGATGCCGCGGAAGCTGTTCGTGTGGAAAATAACGGGAAAGTCACTTATCCTATCAATGCAGTCAATGTTCTGAAGGCCCACGGAAAGAGCGCTCGCGAATCAGTTTTGGTGAAAGGATATGCACTCAATTGCACAGTTGCCAGTCAGGCCATGCCACTTCGTGTTCAAAATGCCAAGATCGCATGTCTCGATTTCTCTTTGATGAAGGCTAAGATGCACCTCGGTATTTCAGTCGTTGTTGAAGATCCAGCCAAGCTTGAGGCTATTCGCAGAGAgtgagttgaaactattcgtttctttttaagctatggaattttcagAGAATTCGATATTACCAAACGCCGCATTGATAAAATTTTGAAAGCCGGAGCCAACGTTGTTCTTACAACTGGAGGTATCGATGATTTGTGCTTGAAGCAATTTGTCGAATCTGGAGCTATGGCTGTTCGTCGATGCAAGAAATCAGACTTGAAGAGAATTGCCAAAGCTACTGGAGCCACATTGACTGTTTCCTTGGCTACTTTGGAAGGAGATGAAGCTTTCGATGCCTCGCTTCTTGGACATGCCGATGAAATTGTTCAAGAAAGAATTAGTGACGACGAGCTCATTCTCATCAAGGGACCGAAATCTCGTACTGCCAGCAGCATTATCCTCCGTGGAGCGAACGATGTGATGCTCGATGAAATGGAGAGATCGGTTCACGACTCACTCTGTGTTGTTCGTAGAGTTCTGGAAAGCAAGAAACTTGTGGCTGGAGGAGGTGCTGTTGAGACTTCTCTCAGTCTTTTCCTTGAAACTTATGCACAAACCTTGTCTTCTCGCGAGCAGCTTGCTGTTGCTGAATTCGCTTCAGCGCTTCTCATCATTCCGAAGGTTTTGGCAAGCAATGCTGCAAGAGATTCTACTGATTTAGTGACAAAACTCCGCGCGTACCACTCCAAAGCTCAATTGATCCCACAACTTCAACACCTCAAGTGgtaagtgaaaatgttttttttaaagagtaggttattacatgttagcttaatgtaataaaattaaaataatttatttcaaaaaatttcgttttgtgcttagaaaaagcgtctaattcatgttttctgaatttgagtcagtttattcactctttttttagGGCTGGTTTGGATCTCGAAGAAGGCACGATCCGCGATAACAAGGAGGCTGGAATTTTGGAGCCAGCTCTTAGTAAGGTCAAGTCTCTGAAGTTCGCCACTGAGGCAGCCATTACGATATTGCGTATTGATGACCTCATCAAACTTGACAAGCAAGAGCCACTTGGAGGAGATGATTGCCACGCTTAAattttcccgtttaccccgtttatatatccctgttttccgcgtgcttctcacataattccgatctgctgctccttatcccaaattctcatgttcagcttttgttttcttcttttgatgatactttattgaacgaaatgttgtaagttttaatgttttgatttcaaagttgtttgtattcgtttttcattattcaaacaatgaagaagctttgccac"
    CrisprPlanner(gene_name=human_gene_name, aa_mutation_site=amino_acid_mutation_site, sense_strand=nt_seq). \
        plan_my_crispr(from_aa=AminoAcid.ASPARAGINE,
                       to_aa=AminoAcid.SERINE)
test6 = False
if test6:
    print(CrisprPlanner.how_to_get_b_from_a("ACG", AminoAcid.ALANINE))

test7 = False
if test7:
    start = time.time()
    fin = open(r"C:\Users\RZBlab\PycharmProjects\Research-RZB\Code\CRISPR\restriction_enzymes.txt")
    for line in fin:
        lst = line.rstrip("\n").split("\t")
        enzyme_site = lst[0]
        enzyme_name = lst[1]
        parsed_sites_rec = FileReader.find_enzymes_derivatives(enzyme_site, rec=True)
    fin.close()
    end = time.time()
    print(end - start)
    start = time.time()
    fin = open(r"C:\Users\RZBlab\PycharmProjects\Research-RZB\Code\CRISPR\restriction_enzymes.txt")
    for line in fin:
        lst = line.rstrip("\n").split("\t")
        enzyme_site = lst[0]
        enzyme_name = lst[1]
        parsed_sites_iter = FileReader.find_enzymes_derivatives(enzyme_site, rec=False)
    fin.close()
    end = time.time()
    print(end - start)


test8 = False
if test8:
    human_gene_name = 'cct-1'
    amino_acid_mutation_site = 287
    nt_seq = "gtaATGGCATCAGCTGGAGATTCCATTCTTGCCCTCACCGGTAAAAGAACTACTGGACAAGGCATCAGATCTCAGAATGgtaacaccgaaagctcaatataagtatacattaattaattgcagTCACCGCGGCAGTTGCGATCGCCAATATTGTGAAGTCATCTCTTGGCCCTGTCGGACTTGATAAAATGCTTGTCGATGATGTTGGAGATGTCATTGTCACAAATGACGGAGCCACAATTCTGAAACAACTCGAGGTTGAGCATCCGGCTGGAAAAGTGCTTGTAGAACTTGCACAGCTGCAAGACGAGGAGGTCGGAGATGGAACTACTTCTGTCGTTATTGTGGCGGCTGAGCTCTTGAAGAGAGCCGATGAGCTTGTGAAACAAAAAGTTCATCCGACGACTATTATCAATGGTTACCGTCTCGCGTGCAAGGAAGCCGTCAAGTACATTAGTGAAAACATCTCATTCACTTCCGACTCGATTGGTAGACAATCAGTTGTCAACGCTGCCAAAACTTCCATGAGCAGTAAGATTATCGGACCgtgagtttggtgttgtctatgcttcaagaaaattgatttttcagAGACGCCGATTTCTTCGGAGAGCTGGTTGTTGATGCCGCGGAAGCTGTTCGTGTGGAAAATAACGGGAAAGTCACTTATCCTATCAATGCAGTCAATGTTCTGAAGGCCCACGGAAAGAGCGCTCGCGAATCAGTTTTGGTGAAAGGATATGCACTCAATTGCACAGTTGCCAGTCAGGCCATGCCACTTCGTGTTCAAAATGCCAAGATCGCATGTCTCGATTTCTCTTTGATGAAGGCTAAGATGCACCTCGGTATTTCAGTCGTTGTTGAAGATCCAGCCAAGCTTGAGGCTATTCGCAGAGAgtgagttgaaactattcgtttctttttaagctatggaattttcagAGAATTCGATATTACCAAACGCCGCATTGATAAAATTTTGAAAGCCGGAGCCAACGTTGTTCTTACAACTGGAGGTATCGATGATTTGTGCTTGAAGCAATTTGTCGAATCTGGAGCTATGGCTGTTCGTCGATGCAAGAAATCAGACTTGAAGAGAATTGCCAAAGCTACTGGAGCCACATTGACTGTTTCCTTGGCTACTTTGGAAGGAGATGAAGCTTTCGATGCCTCGCTTCTTGGACATGCCGATGAAATTGTTCAAGAAAGAATTAGTGACGACGAGCTCATTCTCATCAAGGGACCGAAATCTCGTACTGCCAGCAGCATTATCCTCCGTGGAGCGAACGATGTGATGCTCGATGAAATGGAGAGATCGGTTCACGACTCACTCTGTGTTGTTCGTAGAGTTCTGGAAAGCAAGAAACTTGTGGCTGGAGGAGGTGCTGTTGAGACTTCTCTCAGTCTTTTCCTTGAAACTTATGCACAAACCTTGTCTTCTCGCGAGCAGCTTGCTGTTGCTGAATTCGCTTCAGCGCTTCTCATCATTCCGAAGGTTTTGGCAAGCAATGCTGCAAGAGATTCTACTGATTTAGTGACAAAACTCCGCGCGTACCACTCCAAAGCTCAATTGATCCCACAACTTCAACACCTCAAGTGgtaagtgaaaatgttttttttaaagagtaggttattacatgttagcttaatgtaataaaattaaaataatttatttcaaaaaatttcgttttgtgcttagaaaaagcgtctaattcatgttttctgaatttgagtcagtttattcactctttttttagGGCTGGTTTGGATCTCGAAGAAGGCACGATCCGCGATAACAAGGAGGCTGGAATTTTGGAGCCAGCTCTTAGTAAGGTCAAGTCTCTGAAGTTCGCCACTGAGGCAGCCATTACGATATTGCGTATTGATGACCTCATCAAACTTGACAAGCAAGAGCCACTTGGAGGAGATGATTGCCACGCTTAAattttcccgtttaccccgtttatatatccctgttttccgcgtgcttctcacataattccgatctgctgctccttatcccaaattctcatgttcagcttttgttttcttcttttgatgatactttattgaacgaaatgttgtaagttttaatgttttgatttcaaagttgtttgtattcgtttttcattattcaaacaatgaagaagctttgccac"
    restriction_sites = CrisprPlanner(gene_name=human_gene_name,
                                      aa_mutation_site=amino_acid_mutation_site,
                                      sense_strand=nt_seq).restriction_enzymes
test9 = False
if test9:
    human_gene_name = 'cct-1'
    amino_acid_mutation_site = 287
    nt_seq = "gtaATGGCATCAGCTGGAGATTCCATTCTTGCCCTCACCGGTAAAAGAACTACTGGACAAGGCATCAGATCTCAGAATGgtaacaccgaaagctcaatataagtatacattaattaattgcagTCACCGCGGCAGTTGCGATCGCCAATATTGTGAAGTCATCTCTTGGCCCTGTCGGACTTGATAAAATGCTTGTCGATGATGTTGGAGATGTCATTGTCACAAATGACGGAGCCACAATTCTGAAACAACTCGAGGTTGAGCATCCGGCTGGAAAAGTGCTTGTAGAACTTGCACAGCTGCAAGACGAGGAGGTCGGAGATGGAACTACTTCTGTCGTTATTGTGGCGGCTGAGCTCTTGAAGAGAGCCGATGAGCTTGTGAAACAAAAAGTTCATCCGACGACTATTATCAATGGTTACCGTCTCGCGTGCAAGGAAGCCGTCAAGTACATTAGTGAAAACATCTCATTCACTTCCGACTCGATTGGTAGACAATCAGTTGTCAACGCTGCCAAAACTTCCATGAGCAGTAAGATTATCGGACCgtgagtttggtgttgtctatgcttcaagaaaattgatttttcagAGACGCCGATTTCTTCGGAGAGCTGGTTGTTGATGCCGCGGAAGCTGTTCGTGTGGAAAATAACGGGAAAGTCACTTATCCTATCAATGCAGTCAATGTTCTGAAGGCCCACGGAAAGAGCGCTCGCGAATCAGTTTTGGTGAAAGGATATGCACTCAATTGCACAGTTGCCAGTCAGGCCATGCCACTTCGTGTTCAAAATGCCAAGATCGCATGTCTCGATTTCTCTTTGATGAAGGCTAAGATGCACCTCGGTATTTCAGTCGTTGTTGAAGATCCAGCCAAGCTTGAGGCTATTCGCAGAGAgtgagttgaaactattcgtttctttttaagctatggaattttcagAGAATTCGATATTACCAAACGCCGCATTGATAAAATTTTGAAAGCCGGAGCCAACGTTGTTCTTACAACTGGAGGTATCGATGATTTGTGCTTGAAGCAATTTGTCGAATCTGGAGCTATGGCTGTTCGTCGATGCAAGAAATCAGACTTGAAGAGAATTGCCAAAGCTACTGGAGCCACATTGACTGTTTCCTTGGCTACTTTGGAAGGAGATGAAGCTTTCGATGCCTCGCTTCTTGGACATGCCGATGAAATTGTTCAAGAAAGAATTAGTGACGACGAGCTCATTCTCATCAAGGGACCGAAATCTCGTACTGCCAGCAGCATTATCCTCCGTGGAGCGAACGATGTGATGCTCGATGAAATGGAGAGATCGGTTCACGACTCACTCTGTGTTGTTCGTAGAGTTCTGGAAAGCAAGAAACTTGTGGCTGGAGGAGGTGCTGTTGAGACTTCTCTCAGTCTTTTCCTTGAAACTTATGCACAAACCTTGTCTTCTCGCGAGCAGCTTGCTGTTGCTGAATTCGCTTCAGCGCTTCTCATCATTCCGAAGGTTTTGGCAAGCAATGCTGCAAGAGATTCTACTGATTTAGTGACAAAACTCCGCGCGTACCACTCCAAAGCTCAATTGATCCCACAACTTCAACACCTCAAGTGgtaagtgaaaatgttttttttaaagagtaggttattacatgttagcttaatgtaataaaattaaaataatttatttcaaaaaatttcgttttgtgcttagaaaaagcgtctaattcatgttttctgaatttgagtcagtttattcactctttttttagGGCTGGTTTGGATCTCGAAGAAGGCACGATCCGCGATAACAAGGAGGCTGGAATTTTGGAGCCAGCTCTTAGTAAGGTCAAGTCTCTGAAGTTCGCCACTGAGGCAGCCATTACGATATTGCGTATTGATGACCTCATCAAACTTGACAAGCAAGAGCCACTTGGAGGAGATGATTGCCACGCTTAAattttcccgtttaccccgtttatatatccctgttttccgcgtgcttctcacataattccgatctgctgctccttatcccaaattctcatgttcagcttttgttttcttcttttgatgatactttattgaacgaaatgttgtaagttttaatgttttgatttcaaagttgtttgtattcgtttttcattattcaaacaatgaagaagctttgccac"
    crisprPlanner = CrisprPlanner(gene_name=human_gene_name,
                                      aa_mutation_site=amino_acid_mutation_site,
                                      sense_strand=nt_seq)
    print("finished with the restriction sites list")
    crisprPlanner.find_sites("TTGCA")
    crisprPlanner.find_sites("TCAGA")
    crisprPlanner.find_sites("GATTC")

test10 = False
if test10:
    codon_data1 = CodonData('CGG', SequenceSites(12, 14))
    codon_data2 = CodonData('CGG', SequenceSites(11, 13))
    codon_data3 = CodonData('CGG', SequenceSites(10, 12))
    codon_data4 = CodonData('CGG', SequenceSites(13, 15))
    codon_data5 = CodonData('CGG', SequenceSites(14, 16))

    same_aa_codons = ['CGC', 'CGA', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA']
    section_to_mutate = ReattachmentSection(1, DNASection.PAM_SITE, SequenceSites(12,14))
    CrisprPlanner.check_outside_codon_mutations(codon_data1, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data1)

    same_aa_codons = ['CGC', 'CGA', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA']
    CrisprPlanner.check_outside_codon_mutations(codon_data2, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data2)

    same_aa_codons = ['CGC', 'CGA', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA']
    CrisprPlanner.check_outside_codon_mutations(codon_data3, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data3)

    same_aa_codons = ['CGC', 'CGA', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA']
    CrisprPlanner.check_outside_codon_mutations(codon_data4, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data4)

    same_aa_codons = ['CGC', 'CGA', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA']
    CrisprPlanner.check_outside_codon_mutations(codon_data5, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data5)

test11 = False
if test11:
    codon_data1 = CodonData('CGG', SequenceSites(24, 26))
    codon_data2 = CodonData('CGG', SequenceSites(25, 27))
    codon_data3 = CodonData('CGG', SequenceSites(26, 28))
    codon_data4 = CodonData('CGG', SequenceSites(8, 10))
    codon_data5 = CodonData('CGG', SequenceSites(9, 11))

    same_aa_codons = ['CGC', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA', 'AGG']
    section_to_mutate = ReattachmentSection(1, DNASection.CR_RNA, SequenceSites(10, 10+20-1-3))
    CrisprPlanner.check_outside_codon_mutations(codon_data1, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data1)

    same_aa_codons = ['CGC', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA', 'AGG']
    CrisprPlanner.check_outside_codon_mutations(codon_data2, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data2)

    same_aa_codons = ['CGC', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA', 'AGG']
    CrisprPlanner.check_outside_codon_mutations(codon_data3, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data3)

    same_aa_codons = ['CGC', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA', 'AGG']
    CrisprPlanner.check_outside_codon_mutations(codon_data4, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data4)

    same_aa_codons = ['CGC', 'CGT', 'AGA', 'AGG', 'ACG', 'CTA', 'AGG']
    CrisprPlanner.check_outside_codon_mutations(codon_data5, same_aa_codons, section_to_mutate)
    print(same_aa_codons, "for", codon_data5)


human_gene_name = 'cct-1'
amino_acid_mutation_site = 3
nt_seq = "gtaATGGCATCAGCTGGAGATTCCATTCTTGCCCTCACCGGTAAAAGAACTACTGGACAAGGCATCAGATCTCAGAATGgtaacaccgaaagctcaatataagtatacattaattaattgcagTCACCGCGGCAGTTGCGATCGCCAATATTGTGAAGTCATCTCTTGGCCCTGTCGGACTTGATAAAATGCTTGTCGATGATGTTGGAGATGTCATTGTCACAAATGACGGAGCCACAATTCTGAAACAACTCGAGGTTGAGCATCCGGCTGGAAAAGTGCTTGTAGAACTTGCACAGCTGCAAGACGAGGAGGTCGGAGATGGAACTACTTCTGTCGTTATTGTGGCGGCTGAGCTCTTGAAGAGAGCCGATGAGCTTGTGAAACAAAAAGTTCATCCGACGACTATTATCAATGGTTACCGTCTCGCGTGCAAGGAAGCCGTCAAGTACATTAGTGAAAACATCTCATTCACTTCCGACTCGATTGGTAGACAATCAGTTGTCAACGCTGCCAAAACTTCCATGAGCAGTAAGATTATCGGACCgtgagtttggtgttgtctatgcttcaagaaaattgatttttcagAGACGCCGATTTCTTCGGAGAGCTGGTTGTTGATGCCGCGGAAGCTGTTCGTGTGGAAAATAACGGGAAAGTCACTTATCCTATCAATGCAGTCAATGTTCTGAAGGCCCACGGAAAGAGCGCTCGCGAATCAGTTTTGGTGAAAGGATATGCACTCAATTGCACAGTTGCCAGTCAGGCCATGCCACTTCGTGTTCAAAATGCCAAGATCGCATGTCTCGATTTCTCTTTGATGAAGGCTAAGATGCACCTCGGTATTTCAGTCGTTGTTGAAGATCCAGCCAAGCTTGAGGCTATTCGCAGAGAgtgagttgaaactattcgtttctttttaagctatggaattttcagAGAATTCGATATTACCAAACGCCGCATTGATAAAATTTTGAAAGCCGGAGCCAACGTTGTTCTTACAACTGGAGGTATCGATGATTTGTGCTTGAAGCAATTTGTCGAATCTGGAGCTATGGCTGTTCGTCGATGCAAGAAATCAGACTTGAAGAGAATTGCCAAAGCTACTGGAGCCACATTGACTGTTTCCTTGGCTACTTTGGAAGGAGATGAAGCTTTCGATGCCTCGCTTCTTGGACATGCCGATGAAATTGTTCAAGAAAGAATTAGTGACGACGAGCTCATTCTCATCAAGGGACCGAAATCTCGTACTGCCAGCAGCATTATCCTCCGTGGAGCGAACGATGTGATGCTCGATGAAATGGAGAGATCGGTTCACGACTCACTCTGTGTTGTTCGTAGAGTTCTGGAAAGCAAGAAACTTGTGGCTGGAGGAGGTGCTGTTGAGACTTCTCTCAGTCTTTTCCTTGAAACTTATGCACAAACCTTGTCTTCTCGCGAGCAGCTTGCTGTTGCTGAATTCGCTTCAGCGCTTCTCATCATTCCGAAGGTTTTGGCAAGCAATGCTGCAAGAGATTCTACTGATTTAGTGACAAAACTCCGCGCGTACCACTCCAAAGCTCAATTGATCCCACAACTTCAACACCTCAAGTGgtaagtgaaaatgttttttttaaagagtaggttattacatgttagcttaatgtaataaaattaaaataatttatttcaaaaaatttcgttttgtgcttagaaaaagcgtctaattcatgttttctgaatttgagtcagtttattcactctttttttagGGCTGGTTTGGATCTCGAAGAAGGCACGATCCGCGATAACAAGGAGGCTGGAATTTTGGAGCCAGCTCTTAGTAAGGTCAAGTCTCTGAAGTTCGCCACTGAGGCAGCCATTACGATATTGCGTATTGATGACCTCATCAAACTTGACAAGCAAGAGCCACTTGGAGGAGATGATTGCCACGCTTAAattttcccgtttaccccgtttatatatccctgttttccgcgtgcttctcacataattccgatctgctgctccttatcccaaattctcatgttcagcttttgttttcttcttttgatgatactttattgaacgaaatgttgtaagttttaatgttttgatttcaaagttgtttgtattcgtttttcattattcaaacaatgaagaagctttgccac"
mutation_zone = SequenceSites(4, 17)
num_rest_sites = 6

test12 = False
if test12:
    rest_enzyme = RestrictionEnzyme(name='PvuII', site='CAGCTG', derivatives=tuple('CAGCTG'),
                                    full_site='CAG/CTG')
    rest_site = RestrictionSite(SequenceSites(7, 12), rest_enzyme)
    point_mutations = [PointMutation(7, 'T')]
    cp = CrisprPlanner(human_gene_name, amino_acid_mutation_site, nt_seq)
    seq_to_mutate = cp.mutated_strand[4:17 + 1]
    cp.find_sites(seq_to_mutate)
    print(cp.is_restriction_site_well_removed(point_mutations, rest_site, mutation_zone, num_rest_sites))

test13 = False
if test13:
    rest_enzyme = RestrictionEnzyme(name='MspA1I', site='CMGCKG', derivatives=tuple('CCGCTG', 'CAGCTG', 'CAGCGG', 'CCGCGG'),
                                    full_site='CMG/CKG')
    rest_site = RestrictionSite(SequenceSites(7, 12), rest_enzyme)
    point_mutations = [PointMutation(8, 'C')]
    cp = CrisprPlanner(human_gene_name, amino_acid_mutation_site, nt_seq)
    seq_to_mutate = cp.mutated_strand[4:17 + 1]
    cp.find_sites(seq_to_mutate)
    print(cp.is_restriction_site_well_removed(point_mutations, rest_site, mutation_zone, num_rest_sites))

# create parsed restriction enzymes
test14 = False
if test14:
    fin = open(r"C:\Users\Liran\PycharmProjects\Research\Code\CRISPR\restriction_enzymes.txt")
    fout = open(r"C:\Users\Liran\PycharmProjects\Research\Code\CRISPR\parsed_restriction_enzymes.txt", "w")
    for line in fin:
        lst = line.rstrip("\n").split("\t")
        enzyme_site = lst[0]
        filtered_site = FileReader.get_plain_site(enzyme_site)
        enzyme_name = lst[1]
        parsed_sites_rec = FileReader.find_enzymes_derivatives(filtered_site, rec=True)
        fout.write(enzyme_name + "\t" + filtered_site + "\t" + ",".join(parsed_sites_rec) + "\t" + enzyme_site + "\n")
    fin.close()
    fout.close()

# test to check whether the function that takes the parsed enzymes file and turns it to a list works fine
test15 = False
if test15:
    rest_enzyme = RestrictionEnzyme(name='MspA1I', site='CMGCKG', derivatives=('CCGCTG', 'CAGCTG', 'CAGCGG', 'CCGCGG'),
                                    full_site='CMG/CKG')
    rest_site = RestrictionSite(SequenceSites(7, 12), rest_enzyme)
    point_mutations = [PointMutation(8, 'C')]
    cp = CrisprPlanner(human_gene_name, amino_acid_mutation_site, nt_seq)
    print("Examples out of", len(cp.restriction_enzymes), ":")
    print(cp.restriction_enzymes[0])
    print(cp.restriction_enzymes[1])
    print(cp.restriction_enzymes[2])
    print(cp.restriction_enzymes[11])
    print(cp.restriction_enzymes[12])
    print(cp.restriction_enzymes[34])
    print(cp.restriction_enzymes[50])
    print(cp.restriction_enzymes[60])
    print(cp.restriction_enzymes[80])
    print(cp.restriction_enzymes[100])


work16 = False
# to check sorting by relevant restriction enzymes
if work16:
    human_gene_name = 'cct-1'
    amino_acid_mutation_site = 287
    enzymes = ['HpyCH4IV', 'DpnII', 'DpnI', 'PacI', 'AscI', 'AvaII', 'DdeI']
    print("Test with enzymes:", enzymes)
    nt_seq = "gtaATGGCATCAGCTGGAGATTCCATTCTTGCCCTCACCGGTAAAAGAACTACTGGACAAGGCATCAGATCTCAGAATGgtaacaccgaaagctcaatataagtatacattaattaattgcagTCACCGCGGCAGTTGCGATCGCCAATATTGTGAAGTCATCTCTTGGCCCTGTCGGACTTGATAAAATGCTTGTCGATGATGTTGGAGATGTCATTGTCACAAATGACGGAGCCACAATTCTGAAACAACTCGAGGTTGAGCATCCGGCTGGAAAAGTGCTTGTAGAACTTGCACAGCTGCAAGACGAGGAGGTCGGAGATGGAACTACTTCTGTCGTTATTGTGGCGGCTGAGCTCTTGAAGAGAGCCGATGAGCTTGTGAAACAAAAAGTTCATCCGACGACTATTATCAATGGTTACCGTCTCGCGTGCAAGGAAGCCGTCAAGTACATTAGTGAAAACATCTCATTCACTTCCGACTCGATTGGTAGACAATCAGTTGTCAACGCTGCCAAAACTTCCATGAGCAGTAAGATTATCGGACCgtgagtttggtgttgtctatgcttcaagaaaattgatttttcagAGACGCCGATTTCTTCGGAGAGCTGGTTGTTGATGCCGCGGAAGCTGTTCGTGTGGAAAATAACGGGAAAGTCACTTATCCTATCAATGCAGTCAATGTTCTGAAGGCCCACGGAAAGAGCGCTCGCGAATCAGTTTTGGTGAAAGGATATGCACTCAATTGCACAGTTGCCAGTCAGGCCATGCCACTTCGTGTTCAAAATGCCAAGATCGCATGTCTCGATTTCTCTTTGATGAAGGCTAAGATGCACCTCGGTATTTCAGTCGTTGTTGAAGATCCAGCCAAGCTTGAGGCTATTCGCAGAGAgtgagttgaaactattcgtttctttttaagctatggaattttcagAGAATTCGATATTACCAAACGCCGCATTGATAAAATTTTGAAAGCCGGAGCCAACGTTGTTCTTACAACTGGAGGTATCGATGATTTGTGCTTGAAGCAATTTGTCGAATCTGGAGCTATGGCTGTTCGTCGATGCAAGAAATCAGACTTGAAGAGAATTGCCAAAGCTACTGGAGCCACATTGACTGTTTCCTTGGCTACTTTGGAAGGAGATGAAGCTTTCGATGCCTCGCTTCTTGGACATGCCGATGAAATTGTTCAAGAAAGAATTAGTGACGACGAGCTCATTCTCATCAAGGGACCGAAATCTCGTACTGCCAGCAGCATTATCCTCCGTGGAGCGAACGATGTGATGCTCGATGAAATGGAGAGATCGGTTCACGACTCACTCTGTGTTGTTCGTAGAGTTCTGGAAAGCAAGAAACTTGTGGCTGGAGGAGGTGCTGTTGAGACTTCTCTCAGTCTTTTCCTTGAAACTTATGCACAAACCTTGTCTTCTCGCGAGCAGCTTGCTGTTGCTGAATTCGCTTCAGCGCTTCTCATCATTCCGAAGGTTTTGGCAAGCAATGCTGCAAGAGATTCTACTGATTTAGTGACAAAACTCCGCGCGTACCACTCCAAAGCTCAATTGATCCCACAACTTCAACACCTCAAGTGgtaagtgaaaatgttttttttaaagagtaggttattacatgttagcttaatgtaataaaattaaaataatttatttcaaaaaatttcgttttgtgcttagaaaaagcgtctaattcatgttttctgaatttgagtcagtttattcactctttttttagGGCTGGTTTGGATCTCGAAGAAGGCACGATCCGCGATAACAAGGAGGCTGGAATTTTGGAGCCAGCTCTTAGTAAGGTCAAGTCTCTGAAGTTCGCCACTGAGGCAGCCATTACGATATTGCGTATTGATGACCTCATCAAACTTGACAAGCAAGAGCCACTTGGAGGAGATGATTGCCACGCTTAAattttcccgtttaccccgtttatatatccctgttttccgcgtgcttctcacataattccgatctgctgctccttatcccaaattctcatgttcagcttttgttttcttcttttgatgatactttattgaacgaaatgttgtaagttttaatgttttgatttcaaagttgtttgtattcgtttttcattattcaaacaatgaagaagctttgccac"
    CrisprPlanner(gene_name=human_gene_name, aa_mutation_site=amino_acid_mutation_site, sense_strand=nt_seq,
                  existing_enzymes=enzymes).plan_my_crispr(from_aa=AminoAcid.ASPARAGINE,
                                                             to_aa=AminoAcid.SERINE)

work17 = False
# to check sorting by distance - no other near site
if work17:
    cp = initiate_cp()
    rs = RestrictionSite(index=SequenceSites(start=1162, end=1168),
                         enzyme=RestrictionEnzyme(name='Cac8I', site='GCNNGC', derivatives=('GCTGGC', 'GCACGC', 'GCCTGC',
                                                                                            'GCGAGC', 'GCGTGC', 'GCGCGC',
                                                                                            'GCTAGC', 'GCTCGC', 'GCTTGC',
                                                                                            'GCCCGC', 'GCCAGC', 'GCCGGC',
                                                                                            'GCGGGC', 'GCAGGC', 'GCAAGC',
                                                                                            'GCATGC'),
                                                  full_site='GCN/NGC'))

    print("distance from other sites within 100 nt distance", cp.check_distance(restriction_site=rs))
    print("rareness:", cp.check_rareness(rs))


work18 = False
# to check sorting by distance - other near site
if work18:
    cp = initiate_cp()
    rs = RestrictionSite(index=SequenceSites(start=1163, end=1167),
                         enzyme=RestrictionEnzyme(name='MspJI', site='CNNR',
                                                  derivatives=('CGGA', 'CTGG', 'CGGG', 'CGAA', 'CATA', 'CAGA', 'CCCA',
                                                               'CACA', 'CCGA', 'CTTG', 'CTAG', 'CGCG', 'CATG', 'CCTG',
                                                               'CTCA', 'CGTG', 'CGAG', 'CACG', 'CGCA', 'CCGG', 'CTCG',
                                                               'CCAG', 'CCAA', 'CTTA', 'CTGA', 'CCCG', 'CGTA', 'CAGG',
                                                               'CAAG', 'CAAA', 'CTAA', 'CCTA'), full_site='CNNR(9/13)'))
    print("distance from other sites within 100 nt distance", cp.check_distance(restriction_site=rs))
    print("rareness:", cp.check_rareness(rs))

mutate_rest_site_test = False
# this test is designed to check what happens if no restriction site is created\removed naturally and we have to insert
# mutations
if mutate_rest_site_test:
    human_gene_name = 'cct-1'
    amino_acid_mutation_site = 287
    nt_seq = "gtaATGGCATCAGCTGGAGATTCCATTCTTGCCCTCACCGGTAAAAGAACTACTGGACAAGGCATCAGATCTCAGAATGgtaacaccgaaagctcaatataagtatacattaattaattgcagTCACCGCGGCAGTTGCGATCGCCAATATTGTGAAGTCATCTCTTGGCCCTGTCGGACTTGATAAAATGCTTGTCGATGATGTTGGAGATGTCATTGTCACAAATGACGGAGCCACAATTCTGAAACAACTCGAGGTTGAGCATCCGGCTGGAAAAGTGCTTGTAGAACTTGCACAGCTGCAAGACGAGGAGGTCGGAGATGGAACTACTTCTGTCGTTATTGTGGCGGCTGAGCTCTTGAAGAGAGCCGATGAGCTTGTGAAACAAAAAGTTCATCCGACGACTATTATCAATGGTTACCGTCTCGCGTGCAAGGAAGCCGTCAAGTACATTAGTGAAAACATCTCATTCACTTCCGACTCGATTGGTAGACAATCAGTTGTCAACGCTGCCAAAACTTCCATGAGCAGTAAGATTATCGGACCgtgagtttggtgttgtctatgcttcaagaaaattgatttttcagAGACGCCGATTTCTTCGGAGAGCTGGTTGTTGATGCCGCGGAAGCTGTTCGTGTGGAAAATAACGGGAAAGTCACTTATCCTATCAATGCAGTCAATGTTCTGAAGGCCCACGGAAAGAGCGCTCGCGAATCAGTTTTGGTGAAAGGATATGCACTCAATTGCACAGTTGCCAGTCAGGCCATGCCACTTCGTGTTCAAAATGCCAAGATCGCATGTCTCGATTTCTCTTTGATGAAGGCTAAGATGCACCTCGGTATTTCAGTCGTTGTTGAAGATCCAGCCAAGCTTGAGGCTATTCGCAGAGAgtgagttgaaactattcgtttctttttaagctatggaattttcagAGAATTCGATATTACCAAACGCCGCATTGATAAAATTTTGAAAGCCGGAGCCAACGTTGTTCTTACAACTGGAGGTATCGATGATTTGTGCTTGAAGCAATTTGTCGAATCTGGAGCTATGGCTGTTCGTCGATGCAAGAAATCAGACTTGAAGAGAATTGCCAAAGCTACTGGAGCCACATTGACTGTTTCCTTGGCTACTTTGGAAGGAGATGAAGCTTTCGATGCCTCGCTTCTTGGACATGCCGATGAAATTGTTCAAGAAAGAATTAGTGACGACGAGCTCATTCTCATCAAGGGACCGAAATCTCGTACTGCCAGCAGCATTATCCTCCGTGGAGCGAACGATGTGATGCTCGATGAAATGGAGAGATCGGTTCACGACTCACTCTGTGTTGTTCGTAGAGTTCTGGAAAGCAAGAAACTTGTGGCTGGAGGAGGTGCTGTTGAGACTTCTCTCAGTCTTTTCCTTGAAACTTATGCACAAACCTTGTCTTCTCGCGAGCAGCTTGCTGTTGCTGAATTCGCTTCAGCGCTTCTCATCATTCCGAAGGTTTTGGCAAGCAATGCTGCAAGAGATTCTACTGATTTAGTGACAAAACTCCGCGCGTACCACTCCAAAGCTCAATTGATCCCACAACTTCAACACCTCAAGTGgtaagtgaaaatgttttttttaaagagtaggttattacatgttagcttaatgtaataaaattaaaataatttatttcaaaaaatttcgttttgtgcttagaaaaagcgtctaattcatgttttctgaatttgagtcagtttattcactctttttttagGGCTGGTTTGGATCTCGAAGAAGGCACGATCCGCGATAACAAGGAGGCTGGAATTTTGGAGCCAGCTCTTAGTAAGGTCAAGTCTCTGAAGTTCGCCACTGAGGCAGCCATTACGATATTGCGTATTGATGACCTCATCAAACTTGACAAGCAAGAGCCACTTGGAGGAGATGATTGCCACGCTTAAattttcccgtttaccccgtttatatatccctgttttccgcgtgcttctcacataattccgatctgctgctccttatcccaaattctcatgttcagcttttgttttcttcttttgatgatactttattgaacgaaatgttgtaagttttaatgttttgatttcaaagttgtttgtattcgtttttcattattcaaacaatgaagaagctttgccac"
    rest_enzyme = RestrictionEnzyme(name='BsaWI', site='WCCGGW', derivatives = ('ACCGGA','TCCGGA','TCCGGT','ACCGGT'),
                                  full_site='W/CCGGW')
    cp = CrisprPlanner(gene_name=human_gene_name, aa_mutation_site=amino_acid_mutation_site, sense_strand=nt_seq)
    cp.restriction_enzymes = [rest_enzyme]
    cp.plan_my_crispr(from_aa=AminoAcid.ASPARAGINE,
                       to_aa=AminoAcid.SERINE)

# outdated
mutate_rest_site_test1 = False
# this test is designed to check what happens if no restriction site is created\removed naturally and we have to insert
# mutations - more monitored
if mutate_rest_site_test1:
    cp = initiate_cp()
    rest_enzyme = RestrictionEnzyme(name='BsaWI', site='WCCGGW', derivatives=('ACCGGA', 'TCCGGA', 'TCCGGT', 'ACCGGT'),
                                    full_site='W/CCGGW')
    cp.restriction_enzymes = [rest_enzyme]
    mutation_zone = SequenceSites(1162, 1167)
    mutated_sites = [PointMutation(index=1163, new_nucleotide="C"), PointMutation(index=1170, new_nucleotide="A")]
    ssodn_mutation_codon_start = 1162
    mutated_strand = "gtggcaaagcttcttcattgtttgaataatgaaaaacgaatacaaacaactttgaaatcaaaacattaaaacttacaacatttcgttcaataaagtatcatcaaaagaagaaaacaaaagctgaacatgagaatttgggataaggagcagcagatcggaattatgtgagaagcacgcggaaaacagggatatataaacggggtaaacgggaaaatTTAAGCGTGGCAATCATCTCCTCCAAGTGGCTCTTGCTTGTCAAGTTTGATGAGGTCATCAATACGCAATATCGTAATGGCTGCCTCAGTGGCGAACTTCAGAGACTTGACCTTACTAAGAGCTGGCTCCAAAATTCCAGCCTCCTTGTTATCGCGGATCGTGCCTTCTTCGAGATCCAAACCAGCCctaaaaaaagagtgaataaactgactcaaattcagaaaacatgaattagacgctttttctaagcacaaaacgaaattttttgaaataaattattttaattttattacattaagctaacatgtaataacctactctttaaaaaaaacattttcacttacCACTTGAGGTGTTGAAGTTGTGGGATCAATTGAGCTTTGGAGTGGTACGCGCGGAGTTTTGTCACTAAATCAGTAGAATCTCTTGCAGCATTGCTTGCCAAAACCTTCGGAATGATGAGAAGCGCTGAAGCGAATTCAGCAACAGCAAGCTGCTCGCGAGAAGACAAGGTTTGTGCATAAGTTTCAAGGAAAAGACTGAGAGAAGTCTCAACAGCACCTCCTCCAGCCACAAGTTTCTTGCTTTCCAGAACTCTACGAACAACACAGAGTGAGTCGTGAACCGATCTCTCCATTTCATCGAGCATCACATCGTTCGCTCCACGGAGGATAATGCTGCTGGCAGTACGAGATTTCGGTCCCTTGATGAGAATGAGCTCGTCGTCACTAATTCTTTCTTGAACAATTTCATCGGCATGTCCAAGAAGCGAGGCATCGAAAGCTTCATCTCCTTCCAAAGTAGCCAAGGAAACAGTCAATGTGGCTCCAGTAGCTTTGGCAATTCTCTTCAAGTCTGATTTCTTGCATCGACGAACAGCCATAGCTCCAGATTCGACAAATTGCTTCAAGCACAAATCATCGATACCTCCAGTTGTAAGAACAACGCTGGCTCAGGCTTTCAAAATTTTATCAATGCGGCGTTTGGTAATATCGAATTCTctgaaaattccatagcttaaaaagaaacgaatagtttcaactcacTCTCTGCGAATAGCCTCAAGCTTGGCTGGATCTTCAACAACGACTGAAATACCGAGGTGCATCTTAGCCTTCATCAAAGAGAAATCGAGACATGCGATCTTGGCATTTTGAACACGAAGTGGCATGGCCTGACTGGCAACTGTGCAATTGAGTGCATATCCTTTCACCAAAACTGATTCGCGAGCGCTCTTTCCGTGGGCCTTCAGAACATTGACTGCATTGATAGGATAAGTGACTTTCCCGTTATTTTCCACACGAACAGCTTCCGCGGCATCAACAACCAGCTCTCCGAAGAAATCGGCGTCTctgaaaaatcaattttcttgaagcatagacaacaccaaactcacGGTCCGATAATCTTACTGCTCATGGAAGTTTTGGCAGCGTTGACAACTGATTGTCTACCAATCGAGTCGGAAGTGAATGAGATGTTTTCACTAATGTACTTGACGGCTTCCTTGCACGCGAGACGGTAACCATTGATAATAGTCGTCGGATGAACTTTTTGTTTCACAAGCTCATCGGCTCTCTTCAAGAGCTCAGCCGCCACAATAACGACAGAAGTAGTTCCATCTCCGACCTCCTCGTCTTGCAGCTGTGCAAGTTCTACAAGCACTTTTCCAGCCGGATGCTCAACCTCGAGTTGTTTCAGAATTGTGGCTCCGTCATTTGTGACAATGACATCTCCAACATCATCGACAAGCATTTTATCAAGTCCGACAGGGCCAAGAGATGACTTCACAATATTGGCGATCGCAACTGCCGCGGTGActgcaattaattaatgtatacttatattgagctttcggtgttacCATTCTGAGATCTGATGCCTTGTCCAGTAGTTCTTTTACCGGTGAGGGCAAGAATGGAATCTCCAGCTGATGCCATtac"
    cp.get_possible_restriction_sites(mutated_strand, mutation_zone, mutated_sites, ssodn_mutation_codon_start)


mutate_rest_site_test2 = False
# this test is designed to check what happens if no restriction site is created\removed naturally and we have to insert
# mutations - more monitored, using different not recursive function
if mutate_rest_site_test2:
    cp = initiate_cp()
    rest_enzyme = RestrictionEnzyme(name='BsaWI', site='WCCGGW', derivatives=('ACCGGA', 'TCCGGA', 'TCCGGT', 'ACCGGT'),
                                    full_site='W/CCGGW')
    cp.restriction_enzymes = [rest_enzyme]
    mutation_zone = SequenceSites(1162, 1167)
    cp.mutated_sites = [PointMutation(index=1163, new_nucleotide="C"), PointMutation(index=1170, new_nucleotide="A")]
    ssodn_mutation_codon_start = 1162
    cp.mutated_strand = "gtggcaaagcttcttcattgtttgaataatgaaaaacgaatacaaacaactttgaaatcaaaacattaaaacttacaacatttcgttcaataaagtatcatcaaaagaagaaaacaaaagctgaacatgagaatttgggataaggagcagcagatcggaattatgtgagaagcacgcggaaaacagggatatataaacggggtaaacgggaaaatTTAAGCGTGGCAATCATCTCCTCCAAGTGGCTCTTGCTTGTCAAGTTTGATGAGGTCATCAATACGCAATATCGTAATGGCTGCCTCAGTGGCGAACTTCAGAGACTTGACCTTACTAAGAGCTGGCTCCAAAATTCCAGCCTCCTTGTTATCGCGGATCGTGCCTTCTTCGAGATCCAAACCAGCCctaaaaaaagagtgaataaactgactcaaattcagaaaacatgaattagacgctttttctaagcacaaaacgaaattttttgaaataaattattttaattttattacattaagctaacatgtaataacctactctttaaaaaaaacattttcacttacCACTTGAGGTGTTGAAGTTGTGGGATCAATTGAGCTTTGGAGTGGTACGCGCGGAGTTTTGTCACTAAATCAGTAGAATCTCTTGCAGCATTGCTTGCCAAAACCTTCGGAATGATGAGAAGCGCTGAAGCGAATTCAGCAACAGCAAGCTGCTCGCGAGAAGACAAGGTTTGTGCATAAGTTTCAAGGAAAAGACTGAGAGAAGTCTCAACAGCACCTCCTCCAGCCACAAGTTTCTTGCTTTCCAGAACTCTACGAACAACACAGAGTGAGTCGTGAACCGATCTCTCCATTTCATCGAGCATCACATCGTTCGCTCCACGGAGGATAATGCTGCTGGCAGTACGAGATTTCGGTCCCTTGATGAGAATGAGCTCGTCGTCACTAATTCTTTCTTGAACAATTTCATCGGCATGTCCAAGAAGCGAGGCATCGAAAGCTTCATCTCCTTCCAAAGTAGCCAAGGAAACAGTCAATGTGGCTCCAGTAGCTTTGGCAATTCTCTTCAAGTCTGATTTCTTGCATCGACGAACAGCCATAGCTCCAGATTCGACAAATTGCTTCAAGCACAAATCATCGATACCTCCAGTTGTAAGAACAACGCTGGCTCAGGCTTTCAAAATTTTATCAATGCGGCGTTTGGTAATATCGAATTCTctgaaaattccatagcttaaaaagaaacgaatagtttcaactcacTCTCTGCGAATAGCCTCAAGCTTGGCTGGATCTTCAACAACGACTGAAATACCGAGGTGCATCTTAGCCTTCATCAAAGAGAAATCGAGACATGCGATCTTGGCATTTTGAACACGAAGTGGCATGGCCTGACTGGCAACTGTGCAATTGAGTGCATATCCTTTCACCAAAACTGATTCGCGAGCGCTCTTTCCGTGGGCCTTCAGAACATTGACTGCATTGATAGGATAAGTGACTTTCCCGTTATTTTCCACACGAACAGCTTCCGCGGCATCAACAACCAGCTCTCCGAAGAAATCGGCGTCTctgaaaaatcaattttcttgaagcatagacaacaccaaactcacGGTCCGATAATCTTACTGCTCATGGAAGTTTTGGCAGCGTTGACAACTGATTGTCTACCAATCGAGTCGGAAGTGAATGAGATGTTTTCACTAATGTACTTGACGGCTTCCTTGCACGCGAGACGGTAACCATTGATAATAGTCGTCGGATGAACTTTTTGTTTCACAAGCTCATCGGCTCTCTTCAAGAGCTCAGCCGCCACAATAACGACAGAAGTAGTTCCATCTCCGACCTCCTCGTCTTGCAGCTGTGCAAGTTCTACAAGCACTTTTCCAGCCGGATGCTCAACCTCGAGTTGTTTCAGAATTGTGGCTCCGTCATTTGTGACAATGACATCTCCAACATCATCGACAAGCATTTTATCAAGTCCGACAGGGCCAAGAGATGACTTCACAATATTGGCGATCGCAACTGCCGCGGTGActgcaattaattaatgtatacttatattgagctttcggtgttacCATTCTGAGATCTGATGCCTTGTCCAGTAGTTCTTTTACCGGTGAGGGCAAGAATGGAATCTCCAGCTGATGCCATtac"
    cp.get_possible_restriction_mutations(mutation_zone)


mutate_rest_site_test3 = False
# this test is designed to check the two function, the recursive get_possible_restriction_sites and its improvement
# get_possible_restriction_mutations can both find a restriction site after mutating
if mutate_rest_site_test3:
    cp = initiate_cp()
    rest_enzyme = RestrictionEnzyme(name='Liran', site='GCCGGW', derivatives=('GCCGGA', 'GCCGGT'),
                                    full_site='G/CCGGW')
    cp.restriction_enzymes = [rest_enzyme]
    mutation_zone = SequenceSites(1162, 1167)
    cp.mutated_sites = [PointMutation(index=1163, new_nucleotide="C"), PointMutation(index=1170, new_nucleotide="A")]
    ssodn_mutation_codon_start = 1162
    cp.mutated_strand = "gtggcaaagcttcttcattgtttgaataatgaaaaacgaatacaaacaactttgaaatcaaaacattaaaacttacaacatttcgttcaataaagtatcatcaaaagaagaaaacaaaagctgaacatgagaatttgggataaggagcagcagatcggaattatgtgagaagcacgcggaaaacagggatatataaacggggtaaacgggaaaatTTAAGCGTGGCAATCATCTCCTCCAAGTGGCTCTTGCTTGTCAAGTTTGATGAGGTCATCAATACGCAATATCGTAATGGCTGCCTCAGTGGCGAACTTCAGAGACTTGACCTTACTAAGAGCTGGCTCCAAAATTCCAGCCTCCTTGTTATCGCGGATCGTGCCTTCTTCGAGATCCAAACCAGCCctaaaaaaagagtgaataaactgactcaaattcagaaaacatgaattagacgctttttctaagcacaaaacgaaattttttgaaataaattattttaattttattacattaagctaacatgtaataacctactctttaaaaaaaacattttcacttacCACTTGAGGTGTTGAAGTTGTGGGATCAATTGAGCTTTGGAGTGGTACGCGCGGAGTTTTGTCACTAAATCAGTAGAATCTCTTGCAGCATTGCTTGCCAAAACCTTCGGAATGATGAGAAGCGCTGAAGCGAATTCAGCAACAGCAAGCTGCTCGCGAGAAGACAAGGTTTGTGCATAAGTTTCAAGGAAAAGACTGAGAGAAGTCTCAACAGCACCTCCTCCAGCCACAAGTTTCTTGCTTTCCAGAACTCTACGAACAACACAGAGTGAGTCGTGAACCGATCTCTCCATTTCATCGAGCATCACATCGTTCGCTCCACGGAGGATAATGCTGCTGGCAGTACGAGATTTCGGTCCCTTGATGAGAATGAGCTCGTCGTCACTAATTCTTTCTTGAACAATTTCATCGGCATGTCCAAGAAGCGAGGCATCGAAAGCTTCATCTCCTTCCAAAGTAGCCAAGGAAACAGTCAATGTGGCTCCAGTAGCTTTGGCAATTCTCTTCAAGTCTGATTTCTTGCATCGACGAACAGCCATAGCTCCAGATTCGACAAATTGCTTCAAGCACAAATCATCGATACCTCCAGTTGTAAGAACAACGCTGGCTCAGGCTTTCAAAATTTTATCAATGCGGCGTTTGGTAATATCGAATTCTctgaaaattccatagcttaaaaagaaacgaatagtttcaactcacTCTCTGCGAATAGCCTCAAGCTTGGCTGGATCTTCAACAACGACTGAAATACCGAGGTGCATCTTAGCCTTCATCAAAGAGAAATCGAGACATGCGATCTTGGCATTTTGAACACGAAGTGGCATGGCCTGACTGGCAACTGTGCAATTGAGTGCATATCCTTTCACCAAAACTGATTCGCGAGCGCTCTTTCCGTGGGCCTTCAGAACATTGACTGCATTGATAGGATAAGTGACTTTCCCGTTATTTTCCACACGAACAGCTTCCGCGGCATCAACAACCAGCTCTCCGAAGAAATCGGCGTCTctgaaaaatcaattttcttgaagcatagacaacaccaaactcacGGTCCGATAATCTTACTGCTCATGGAAGTTTTGGCAGCGTTGACAACTGATTGTCTACCAATCGAGTCGGAAGTGAATGAGATGTTTTCACTAATGTACTTGACGGCTTCCTTGCACGCGAGACGGTAACCATTGATAATAGTCGTCGGATGAACTTTTTGTTTCACAAGCTCATCGGCTCTCTTCAAGAGCTCAGCCGCCACAATAACGACAGAAGTAGTTCCATCTCCGACCTCCTCGTCTTGCAGCTGTGCAAGTTCTACAAGCACTTTTCCAGCCGGATGCTCAACCTCGAGTTGTTTCAGAATTGTGGCTCCGTCATTTGTGACAATGACATCTCCAACATCATCGACAAGCATTTTATCAAGTCCGACAGGGCCAAGAGATGACTTCACAATATTGGCGATCGCAACTGCCGCGGTGActgcaattaattaatgtatacttatattgagctttcggtgttacCATTCTGAGATCTGATGCCTTGTCCAGTAGTTCTTTTACCGGTGAGGGCAAGAATGGAATCTCCAGCTGATGCCATtac"
    # print("###RECURSIVE FUNCTION###")
    # print(*cp.get_possible_restriction_sites(cp.mutated_strand, mutation_zone, cp.mutated_sites,
    #                                         ssodn_mutation_codon_start), sep="\n")
    print("###IMPROVED FUNCTION###")
    print(*cp.get_possible_restriction_mutations(mutation_zone), sep="\n")


dsb_vs_mutation_site_test = False
# this test is designed to check if the mutation direction is rightfully chosen even when the DSB is inside the to be
# mutated codon. shouldn't affect if the codon doesn't touch the DSB.
if dsb_vs_mutation_site_test:
    cp = initiate_cp(complete_fiels=False)
    # to use the instance method choose_ssODN_strand, some changes are to be made:
    cp.pam_sites = SequenceSites(31,33) # DSB = 28
    cp.sense_mutation_site = 25
    print(cp.choose_ssODN_strand(1, to_aa=AminoAcid.ARGININE))

    cp.sense_mutation_site = 26
    print(cp.choose_ssODN_strand(1, to_aa=AminoAcid.ARGININE))

    # different amino acid, different site to mutate
    cp.sense_mutation_site = 26
    print(cp.choose_ssODN_strand(1, to_aa=AminoAcid.TRYPTOPHAN))

    cp.sense_mutation_site = 27
    print(cp.choose_ssODN_strand(1, to_aa=AminoAcid.CYSTEINE))

    cp.sense_mutation_site = 27
    print(cp.choose_ssODN_strand(1, to_aa=AminoAcid.GLUTAMIC_ACID))

    cp.sense_mutation_site = 28
    print(cp.choose_ssODN_strand(1, to_aa=AminoAcid.TRYPTOPHAN))

    cp.sense_mutation_site = 29
    print(cp.choose_ssODN_strand(1, to_aa=AminoAcid.TRYPTOPHAN))


mutate_rest_site_test5 = False
# this test is designed to check whether a restriction site originated mutations in codon\reattachment section will be
# found
if mutate_rest_site_test5:
    cp = initiate_cp()
    rest_enzyme = RestrictionEnzyme(name='Liran', site='GCCGGW', derivatives=('GCCGGA', 'GCCGGT'),
                                    full_site='G/CCGGW')
    cp.restriction_enzymes = [rest_enzyme]
    mutation_zone = SequenceSites(1162, 1167)
    cp.mutated_sites = [PointMutation(index=1163, new_nucleotide="C"), PointMutation(index=1170, new_nucleotide="A")]
    cp.mutated_strand = "gtggcaaagcttcttcattgtttgaataatgaaaaacgaatacaaacaactttgaaatcaaaacattaaaacttacaacatttcgttcaataaagtatcatcaaaagaagaaaacaaaagctgaacatgagaatttgggataaggagcagcagatcggaattatgtgagaagcacgcggaaaacagggatatataaacggggtaaacgggaaaatTTAAGCGTGGCAATCATCTCCTCCAAGTGGCTCTTGCTTGTCAAGTTTGATGAGGTCATCAATACGCAATATCGTAATGGCTGCCTCAGTGGCGAACTTCAGAGACTTGACCTTACTAAGAGCTGGCTCCAAAATTCCAGCCTCCTTGTTATCGCGGATCGTGCCTTCTTCGAGATCCAAACCAGCCctaaaaaaagagtgaataaactgactcaaattcagaaaacatgaattagacgctttttctaagcacaaaacgaaattttttgaaataaattattttaattttattacattaagctaacatgtaataacctactctttaaaaaaaacattttcacttacCACTTGAGGTGTTGAAGTTGTGGGATCAATTGAGCTTTGGAGTGGTACGCGCGGAGTTTTGTCACTAAATCAGTAGAATCTCTTGCAGCATTGCTTGCCAAAACCTTCGGAATGATGAGAAGCGCTGAAGCGAATTCAGCAACAGCAAGCTGCTCGCGAGAAGACAAGGTTTGTGCATAAGTTTCAAGGAAAAGACTGAGAGAAGTCTCAACAGCACCTCCTCCAGCCACAAGTTTCTTGCTTTCCAGAACTCTACGAACAACACAGAGTGAGTCGTGAACCGATCTCTCCATTTCATCGAGCATCACATCGTTCGCTCCACGGAGGATAATGCTGCTGGCAGTACGAGATTTCGGTCCCTTGATGAGAATGAGCTCGTCGTCACTAATTCTTTCTTGAACAATTTCATCGGCATGTCCAAGAAGCGAGGCATCGAAAGCTTCATCTCCTTCCAAAGTAGCCAAGGAAACAGTCAATGTGGCTCCAGTAGCTTTGGCAATTCTCTTCAAGTCTGATTTCTTGCATCGACGAACAGCCATAGCTCCAGATTCGACAAATTGCTTCAAGCACAAATCATCGATACCTCCAGTTGTAAGAACAACGCTGGCTCAGGCTTTCAAAATTTTATCAATGCGGCGTTTGGTAATATCGAATTCTctgaaaattccatagcttaaaaagaaacgaatagtttcaactcacTCTCTGCGAATAGCCTCAAGCTTGGCTGGATCTTCAACAACGACTGAAATACCGAGGTGCATCTTAGCCTTCATCAAAGAGAAATCGAGACATGCGATCTTGGCATTTTGAACACGAAGTGGCATGGCCTGACTGGCAACTGTGCAATTGAGTGCATATCCTTTCACCAAAACTGATTCGCGAGCGCTCTTTCCGTGGGCCTTCAGAACATTGACTGCATTGATAGGATAAGTGACTTTCCCGTTATTTTCCACACGAACAGCTTCCGCGGCATCAACAACCAGCTCTCCGAAGAAATCGGCGTCTctgaaaaatcaattttcttgaagcatagacaacaccaaactcacGGTCCGATAATCTTACTGCTCATGGAAGTTTTGGCAGCGTTGACAACTGATTGTCTACCAATCGAGTCGGAAGTGAATGAGATGTTTTCACTAATGTACTTGACGGCTTCCTTGCACGCGAGACGGTAACCATTGATAATAGTCGTCGGATGAACTTTTTGTTTCACAAGCTCATCGGCTCTCTTCAAGAGCTCAGCCGCCACAATAACGACAGAAGTAGTTCCATCTCCGACCTCCTCGTCTTGCAGCTGTGCAAGTTCTACAAGCACTTTTCCAGCCGGATGCTCAACCTCGAGTTGTTTCAGAATTGTGGCTCCGTCATTTGTGACAATGACATCTCCAACATCATCGACAAGCATTTTATCAAGTCCGACAGGGCCAAGAGATGACTTCACAATATTGGCGATCGCAACTGCCGCGGTGActgcaattaattaatgtatacttatattgagctttcggtgttacCATTCTGAGATCTGATGCCTTGTCCAGTAGTTCTTTTACCGGTGAGGGCAAGAATGGAATCTCCAGCTGATGCCATtac"
    print(*cp.add_remove_restriction_sites(RestrictionSiteType.INSERTED), sep="\n")


get_codons_test = True
# This test is designed to check if all codons from given range will be extracted. has to be PAM cause CR_RNA cannot cross the end
if get_codons_test:
    def get_codons(section_sites):
        cp = initiate_cp()
        cp.ssODN_mutation_codon_start = 17
        section_to_mutate = ReattachmentSection(4,
                                                DNASection.PAM_SITE,
                                                section_sites)
        return cp.get_relevant_codons(section_to_mutate, cp.ssODN_mutation_codon_start, cp.mutated_strand)

    section_sites = SequenceSites(17, 19)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 1 else print(False)

    section_sites = SequenceSites(17, 20)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 2 else print(False)

    section_sites = SequenceSites(17, 21)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 2 else print(False)

    section_sites = SequenceSites(17, 22)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 2 else print(False)

    section_sites = SequenceSites(16, 18)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 2 else print(False)

    section_sites = SequenceSites(16, 19)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 2 else print(False)

    section_sites = SequenceSites(16, 20)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 3 else print(False)

    section_sites = SequenceSites(15, 18)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 2 else print(False)

    section_sites = SequenceSites(15, 19)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 2 else print(False)

    section_sites = SequenceSites(15, 20)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 3 else print(False)

    section_sites = SequenceSites(13, 20)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 4 else print(False)

    section_sites = SequenceSites(18, 20)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 2 else print(False)

    section_sites = SequenceSites(19, 23)
    codons_data = get_codons(section_sites)
    print(True) if len(codons_data) == 3 else print(False)
